// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testUserMetrics(t *testing.T) {
	t.Parallel()

	query := UserMetrics()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testUserMetricsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserMetricsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := UserMetrics().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserMetricsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserMetricSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testUserMetricsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := UserMetricExists(ctx, tx, o.Sender, o.ChannelName)
	if err != nil {
		t.Errorf("Unable to check if UserMetric exists: %s", err)
	}
	if !e {
		t.Errorf("Expected UserMetricExists to return true, but got false.")
	}
}

func testUserMetricsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	userMetricFound, err := FindUserMetric(ctx, tx, o.Sender, o.ChannelName)
	if err != nil {
		t.Error(err)
	}

	if userMetricFound == nil {
		t.Error("want a record, got nil")
	}
}

func testUserMetricsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = UserMetrics().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testUserMetricsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := UserMetrics().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testUserMetricsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	userMetricOne := &UserMetric{}
	userMetricTwo := &UserMetric{}
	if err = randomize.Struct(seed, userMetricOne, userMetricDBTypes, false, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}
	if err = randomize.Struct(seed, userMetricTwo, userMetricDBTypes, false, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userMetricOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userMetricTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserMetrics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testUserMetricsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	userMetricOne := &UserMetric{}
	userMetricTwo := &UserMetric{}
	if err = randomize.Struct(seed, userMetricOne, userMetricDBTypes, false, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}
	if err = randomize.Struct(seed, userMetricTwo, userMetricDBTypes, false, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = userMetricOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = userMetricTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func userMetricBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func userMetricAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *UserMetric) error {
	*o = UserMetric{}
	return nil
}

func testUserMetricsHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &UserMetric{}
	o := &UserMetric{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, userMetricDBTypes, false); err != nil {
		t.Errorf("Unable to randomize UserMetric object: %s", err)
	}

	AddUserMetricHook(boil.BeforeInsertHook, userMetricBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	userMetricBeforeInsertHooks = []UserMetricHook{}

	AddUserMetricHook(boil.AfterInsertHook, userMetricAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	userMetricAfterInsertHooks = []UserMetricHook{}

	AddUserMetricHook(boil.AfterSelectHook, userMetricAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	userMetricAfterSelectHooks = []UserMetricHook{}

	AddUserMetricHook(boil.BeforeUpdateHook, userMetricBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	userMetricBeforeUpdateHooks = []UserMetricHook{}

	AddUserMetricHook(boil.AfterUpdateHook, userMetricAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	userMetricAfterUpdateHooks = []UserMetricHook{}

	AddUserMetricHook(boil.BeforeDeleteHook, userMetricBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	userMetricBeforeDeleteHooks = []UserMetricHook{}

	AddUserMetricHook(boil.AfterDeleteHook, userMetricAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	userMetricAfterDeleteHooks = []UserMetricHook{}

	AddUserMetricHook(boil.BeforeUpsertHook, userMetricBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	userMetricBeforeUpsertHooks = []UserMetricHook{}

	AddUserMetricHook(boil.AfterUpsertHook, userMetricAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	userMetricAfterUpsertHooks = []UserMetricHook{}
}

func testUserMetricsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserMetricsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(userMetricColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testUserMetricsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserMetricsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := UserMetricSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testUserMetricsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := UserMetrics().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	userMetricDBTypes = map[string]string{`Sender`: `text`, `ChannelName`: `text`, `WordCount`: `bigint`, `MessageCount`: `bigint`, `WatchTime`: `bigint`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `Emoji`: `text`, `TextColor`: `text`}
	_                 = bytes.MinRead
)

func testUserMetricsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(userMetricPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(userMetricAllColumns) == len(userMetricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testUserMetricsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(userMetricAllColumns) == len(userMetricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &UserMetric{}
	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, userMetricDBTypes, true, userMetricPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(userMetricAllColumns, userMetricPrimaryKeyColumns) {
		fields = userMetricAllColumns
	} else {
		fields = strmangle.SetComplement(
			userMetricAllColumns,
			userMetricPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := UserMetricSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testUserMetricsUpsert(t *testing.T) {
	t.Parallel()

	if len(userMetricAllColumns) == len(userMetricPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := UserMetric{}
	if err = randomize.Struct(seed, &o, userMetricDBTypes, true); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserMetric: %s", err)
	}

	count, err := UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, userMetricDBTypes, false, userMetricPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize UserMetric struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert UserMetric: %s", err)
	}

	count, err = UserMetrics().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
