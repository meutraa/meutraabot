// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserMetric is an object representing the database table.
type UserMetric struct {
	Sender       string      `boil:"sender" json:"sender" toml:"sender" yaml:"sender"`
	ChannelName  string      `boil:"channel_name" json:"channel_name" toml:"channel_name" yaml:"channel_name"`
	Emoji        null.String `boil:"emoji" json:"emoji,omitempty" toml:"emoji" yaml:"emoji,omitempty"`
	TextColor    null.String `boil:"text_color" json:"text_color,omitempty" toml:"text_color" yaml:"text_color,omitempty"`
	WordCount    null.Int64  `boil:"word_count" json:"word_count,omitempty" toml:"word_count" yaml:"word_count,omitempty"`
	MessageCount null.Int64  `boil:"message_count" json:"message_count,omitempty" toml:"message_count" yaml:"message_count,omitempty"`
	WatchTime    null.Int64  `boil:"watch_time" json:"watch_time,omitempty" toml:"watch_time" yaml:"watch_time,omitempty"`
	CreatedAt    null.Time   `boil:"created_at" json:"created_at,omitempty" toml:"created_at" yaml:"created_at,omitempty"`
	UpdatedAt    null.Time   `boil:"updated_at" json:"updated_at,omitempty" toml:"updated_at" yaml:"updated_at,omitempty"`

	R *userMetricR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userMetricL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserMetricColumns = struct {
	Sender       string
	ChannelName  string
	Emoji        string
	TextColor    string
	WordCount    string
	MessageCount string
	WatchTime    string
	CreatedAt    string
	UpdatedAt    string
}{
	Sender:       "sender",
	ChannelName:  "channel_name",
	Emoji:        "emoji",
	TextColor:    "text_color",
	WordCount:    "word_count",
	MessageCount: "message_count",
	WatchTime:    "watch_time",
	CreatedAt:    "created_at",
	UpdatedAt:    "updated_at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

type whereHelpernull_Int64 struct{ field string }

func (w whereHelpernull_Int64) EQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int64) NEQ(x null.Int64) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int64) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int64) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }
func (w whereHelpernull_Int64) LT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int64) LTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int64) GT(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int64) GTE(x null.Int64) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}

var UserMetricWhere = struct {
	Sender       whereHelperstring
	ChannelName  whereHelperstring
	Emoji        whereHelpernull_String
	TextColor    whereHelpernull_String
	WordCount    whereHelpernull_Int64
	MessageCount whereHelpernull_Int64
	WatchTime    whereHelpernull_Int64
	CreatedAt    whereHelpernull_Time
	UpdatedAt    whereHelpernull_Time
}{
	Sender:       whereHelperstring{field: "\"user_metrics\".\"sender\""},
	ChannelName:  whereHelperstring{field: "\"user_metrics\".\"channel_name\""},
	Emoji:        whereHelpernull_String{field: "\"user_metrics\".\"emoji\""},
	TextColor:    whereHelpernull_String{field: "\"user_metrics\".\"text_color\""},
	WordCount:    whereHelpernull_Int64{field: "\"user_metrics\".\"word_count\""},
	MessageCount: whereHelpernull_Int64{field: "\"user_metrics\".\"message_count\""},
	WatchTime:    whereHelpernull_Int64{field: "\"user_metrics\".\"watch_time\""},
	CreatedAt:    whereHelpernull_Time{field: "\"user_metrics\".\"created_at\""},
	UpdatedAt:    whereHelpernull_Time{field: "\"user_metrics\".\"updated_at\""},
}

// UserMetricRels is where relationship names are stored.
var UserMetricRels = struct {
}{}

// userMetricR is where relationships are stored.
type userMetricR struct {
}

// NewStruct creates a new relationship struct
func (*userMetricR) NewStruct() *userMetricR {
	return &userMetricR{}
}

// userMetricL is where Load methods for each relationship are stored.
type userMetricL struct{}

var (
	userMetricAllColumns            = []string{"sender", "channel_name", "emoji", "text_color", "word_count", "message_count", "watch_time", "created_at", "updated_at"}
	userMetricColumnsWithoutDefault = []string{"sender", "channel_name", "emoji", "text_color", "word_count", "message_count", "watch_time", "created_at", "updated_at"}
	userMetricColumnsWithDefault    = []string{}
	userMetricPrimaryKeyColumns     = []string{"sender", "channel_name"}
)

type (
	// UserMetricSlice is an alias for a slice of pointers to UserMetric.
	// This should generally be used opposed to []UserMetric.
	UserMetricSlice []*UserMetric

	userMetricQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userMetricType                 = reflect.TypeOf(&UserMetric{})
	userMetricMapping              = queries.MakeStructMapping(userMetricType)
	userMetricPrimaryKeyMapping, _ = queries.BindMapping(userMetricType, userMetricMapping, userMetricPrimaryKeyColumns)
	userMetricInsertCacheMut       sync.RWMutex
	userMetricInsertCache          = make(map[string]insertCache)
	userMetricUpdateCacheMut       sync.RWMutex
	userMetricUpdateCache          = make(map[string]updateCache)
	userMetricUpsertCacheMut       sync.RWMutex
	userMetricUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// OneG returns a single userMetric record from the query using the global executor.
func (q userMetricQuery) OneG() (*UserMetric, error) {
	return q.One(boil.GetDB())
}

// One returns a single userMetric record from the query.
func (q userMetricQuery) One(exec boil.Executor) (*UserMetric, error) {
	o := &UserMetric{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_metrics")
	}

	return o, nil
}

// AllG returns all UserMetric records from the query using the global executor.
func (q userMetricQuery) AllG() (UserMetricSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserMetric records from the query.
func (q userMetricQuery) All(exec boil.Executor) (UserMetricSlice, error) {
	var o []*UserMetric

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserMetric slice")
	}

	return o, nil
}

// CountG returns the count of all UserMetric records in the query, and panics on error.
func (q userMetricQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserMetric records in the query.
func (q userMetricQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_metrics rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table, and panics on error.
func (q userMetricQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userMetricQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_metrics exists")
	}

	return count > 0, nil
}

// UserMetrics retrieves all the records using an executor.
func UserMetrics(mods ...qm.QueryMod) userMetricQuery {
	mods = append(mods, qm.From("\"user_metrics\""))
	return userMetricQuery{NewQuery(mods...)}
}

// FindUserMetricG retrieves a single record by ID.
func FindUserMetricG(sender string, channelName string, selectCols ...string) (*UserMetric, error) {
	return FindUserMetric(boil.GetDB(), sender, channelName, selectCols...)
}

// FindUserMetric retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserMetric(exec boil.Executor, sender string, channelName string, selectCols ...string) (*UserMetric, error) {
	userMetricObj := &UserMetric{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_metrics\" where \"sender\"=$1 AND \"channel_name\"=$2", sel,
	)

	q := queries.Raw(query, sender, channelName)

	err := q.Bind(nil, exec, userMetricObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_metrics")
	}

	return userMetricObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserMetric) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserMetric) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_metrics provided for insertion")
	}

	var err error
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	if queries.MustTime(o.UpdatedAt).IsZero() {
		queries.SetScanner(&o.UpdatedAt, currTime)
	}

	nzDefaults := queries.NonZeroDefaultSet(userMetricColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userMetricInsertCacheMut.RLock()
	cache, cached := userMetricInsertCache[key]
	userMetricInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userMetricAllColumns,
			userMetricColumnsWithDefault,
			userMetricColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userMetricType, userMetricMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userMetricType, userMetricMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_metrics\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_metrics\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_metrics")
	}

	if !cached {
		userMetricInsertCacheMut.Lock()
		userMetricInsertCache[key] = cache
		userMetricInsertCacheMut.Unlock()
	}

	return nil
}

// UpdateG a single UserMetric record using the global executor.
// See Update for more documentation.
func (o *UserMetric) UpdateG(columns boil.Columns) error {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserMetric.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserMetric) Update(exec boil.Executor, columns boil.Columns) error {
	currTime := time.Now().In(boil.GetLocation())

	queries.SetScanner(&o.UpdatedAt, currTime)

	var err error
	key := makeCacheKey(columns, nil)
	userMetricUpdateCacheMut.RLock()
	cache, cached := userMetricUpdateCache[key]
	userMetricUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userMetricAllColumns,
			userMetricPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return errors.New("models: unable to update user_metrics, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_metrics\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userMetricPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userMetricType, userMetricMapping, append(wl, userMetricPrimaryKeyColumns...))
		if err != nil {
			return err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	_, err = exec.Exec(cache.query, values...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update user_metrics row")
	}

	if !cached {
		userMetricUpdateCacheMut.Lock()
		userMetricUpdateCache[key] = cache
		userMetricUpdateCacheMut.Unlock()
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (q userMetricQuery) UpdateAllG(cols M) error {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userMetricQuery) UpdateAll(exec boil.Executor, cols M) error {
	queries.SetUpdate(q.Query, cols)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all for user_metrics")
	}

	return nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserMetricSlice) UpdateAllG(cols M) error {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserMetricSlice) UpdateAll(exec boil.Executor, cols M) error {
	ln := int64(len(o))
	if ln == 0 {
		return nil
	}

	if len(cols) == 0 {
		return errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMetricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_metrics\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userMetricPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to update all in userMetric slice")
	}

	return nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserMetric) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserMetric) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_metrics provided for upsert")
	}
	currTime := time.Now().In(boil.GetLocation())

	if queries.MustTime(o.CreatedAt).IsZero() {
		queries.SetScanner(&o.CreatedAt, currTime)
	}
	queries.SetScanner(&o.UpdatedAt, currTime)

	nzDefaults := queries.NonZeroDefaultSet(userMetricColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userMetricUpsertCacheMut.RLock()
	cache, cached := userMetricUpsertCache[key]
	userMetricUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userMetricAllColumns,
			userMetricColumnsWithDefault,
			userMetricColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userMetricAllColumns,
			userMetricPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_metrics, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userMetricPrimaryKeyColumns))
			copy(conflict, userMetricPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_metrics\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userMetricType, userMetricMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userMetricType, userMetricMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_metrics")
	}

	if !cached {
		userMetricUpsertCacheMut.Lock()
		userMetricUpsertCache[key] = cache
		userMetricUpsertCacheMut.Unlock()
	}

	return nil
}

// DeleteG deletes a single UserMetric record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserMetric) DeleteG() error {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserMetric record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserMetric) Delete(exec boil.Executor) error {
	if o == nil {
		return errors.New("models: no UserMetric provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userMetricPrimaryKeyMapping)
	sql := "DELETE FROM \"user_metrics\" WHERE \"sender\"=$1 AND \"channel_name\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete from user_metrics")
	}

	return nil
}

// DeleteAll deletes all matching rows.
func (q userMetricQuery) DeleteAll(exec boil.Executor) error {
	if q.Query == nil {
		return errors.New("models: no userMetricQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	_, err := q.Query.Exec(exec)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from user_metrics")
	}

	return nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserMetricSlice) DeleteAllG() error {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserMetricSlice) DeleteAll(exec boil.Executor) error {
	if len(o) == 0 {
		return nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMetricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_metrics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMetricPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	_, err := exec.Exec(sql, args...)
	if err != nil {
		return errors.Wrap(err, "models: unable to delete all from userMetric slice")
	}

	return nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserMetric) ReloadG() error {
	if o == nil {
		return errors.New("models: no UserMetric provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserMetric) Reload(exec boil.Executor) error {
	ret, err := FindUserMetric(exec, o.Sender, o.ChannelName)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMetricSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("models: empty UserMetricSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMetricSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserMetricSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMetricPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_metrics\".* FROM \"user_metrics\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMetricPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserMetricSlice")
	}

	*o = slice

	return nil
}

// UserMetricExistsG checks if the UserMetric row exists.
func UserMetricExistsG(sender string, channelName string) (bool, error) {
	return UserMetricExists(boil.GetDB(), sender, channelName)
}

// UserMetricExists checks if the UserMetric row exists.
func UserMetricExists(exec boil.Executor, sender string, channelName string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_metrics\" where \"sender\"=$1 AND \"channel_name\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, sender, channelName)
	}
	row := exec.QueryRow(sql, sender, channelName)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_metrics exists")
	}

	return exists, nil
}
