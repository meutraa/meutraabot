// Code generated by sqlc. DO NOT EDIT.
// source: users.sql

package db

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :exec
INSERT INTO users
  (channel_id, sender_id, created_at, message_count, word_count, watch_time)
  VALUES ($1, $2, NOW(), 0, 0, 0)
  ON CONFLICT DO NOTHING
`

type CreateUserParams struct {
	ChannelID string
	SenderID  string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) error {
	_, err := q.exec(ctx, q.createUserStmt, createUser, arg.ChannelID, arg.SenderID)
	return err
}

const getMetrics = `-- name: GetMetrics :one
SELECT
  watch_time,
  message_count,
  word_count,
  extract(epoch from (NOW() - created_at)) as age,
  (watch_time/60) + (word_count / 8) as points,
  created_at
  FROM users
  WHERE channel_id = $1
  AND sender_id = $2
`

type GetMetricsParams struct {
	ChannelID string
	SenderID  string
}

type GetMetricsRow struct {
	WatchTime    int64
	MessageCount int64
	WordCount    int64
	Age          float64
	Points       int32
	CreatedAt    time.Time
}

func (q *Queries) GetMetrics(ctx context.Context, arg GetMetricsParams) (GetMetricsRow, error) {
	row := q.queryRow(ctx, q.getMetricsStmt, getMetrics, arg.ChannelID, arg.SenderID)
	var i GetMetricsRow
	err := row.Scan(
		&i.WatchTime,
		&i.MessageCount,
		&i.WordCount,
		&i.Age,
		&i.Points,
		&i.CreatedAt,
	)
	return i, err
}

const getTopWatchers = `-- name: GetTopWatchers :many
SELECT
  sender_id
  FROM users
  WHERE channel_id = $1
  ORDER BY ((watch_time/60) + (word_count / 8)) DESC
  LIMIT $2
`

type GetTopWatchersParams struct {
	ChannelID string
	Limit     int32
}

func (q *Queries) GetTopWatchers(ctx context.Context, arg GetTopWatchersParams) ([]string, error) {
	rows, err := q.query(ctx, q.getTopWatchersStmt, getTopWatchers, arg.ChannelID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var sender_id string
		if err := rows.Scan(&sender_id); err != nil {
			return nil, err
		}
		items = append(items, sender_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTopWatchersAverage = `-- name: GetTopWatchersAverage :many
SELECT
  sender_id
  FROM users
  WHERE channel_id = $1
  ORDER BY (((watch_time/60) + (word_count / 8)) / extract(epoch from (NOW() - created_at))) DESC
  LIMIT $2
`

type GetTopWatchersAverageParams struct {
	ChannelID string
	Limit     int32
}

func (q *Queries) GetTopWatchersAverage(ctx context.Context, arg GetTopWatchersAverageParams) ([]string, error) {
	rows, err := q.query(ctx, q.getTopWatchersAverageStmt, getTopWatchersAverage, arg.ChannelID, arg.Limit)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var sender_id string
		if err := rows.Scan(&sender_id); err != nil {
			return nil, err
		}
		items = append(items, sender_id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWatchTimeRank = `-- name: GetWatchTimeRank :one
SELECT
  cast(rank AS INTEGER)
  FROM
    (SELECT
      RANK() OVER (ORDER BY watch_time DESC) AS rank,
      sender_id
      FROM users
      WHERE channel_id = $1
  ) AS ss
  WHERE sender_id = $2
`

type GetWatchTimeRankParams struct {
	ChannelID string
	SenderID  string
}

func (q *Queries) GetWatchTimeRank(ctx context.Context, arg GetWatchTimeRankParams) (int32, error) {
	row := q.queryRow(ctx, q.getWatchTimeRankStmt, getWatchTimeRank, arg.ChannelID, arg.SenderID)
	var rank int32
	err := row.Scan(&rank)
	return rank, err
}

const getWatchTimeRankAverage = `-- name: GetWatchTimeRankAverage :one
SELECT
  cast(rank AS INTEGER)
  FROM
    (SELECT
      RANK() OVER (ORDER BY (watch_time / extract(epoch from (NOW() - created_at))) DESC) AS rank,
      sender_id
      FROM users
      WHERE channel_id = $1
  ) AS ss
  WHERE sender_id = $2
`

type GetWatchTimeRankAverageParams struct {
	ChannelID string
	SenderID  string
}

func (q *Queries) GetWatchTimeRankAverage(ctx context.Context, arg GetWatchTimeRankAverageParams) (int32, error) {
	row := q.queryRow(ctx, q.getWatchTimeRankAverageStmt, getWatchTimeRankAverage, arg.ChannelID, arg.SenderID)
	var rank int32
	err := row.Scan(&rank)
	return rank, err
}

const updateMetrics = `-- name: UpdateMetrics :exec
UPDATE users
  SET
    message_count = message_count + 1,
    word_count = word_count + $3,
    watch_time = CASE
      WHEN NOW() - updated_at < interval '15 minutes'
        THEN watch_time + extract(epoch from (NOW() - updated_at))
      ELSE watch_time
    END,
    updated_at = NOW()
  WHERE channel_id = $1
  AND sender_id = $2
`

type UpdateMetricsParams struct {
	ChannelID string
	SenderID  string
	WordCount int64
}

func (q *Queries) UpdateMetrics(ctx context.Context, arg UpdateMetricsParams) error {
	_, err := q.exec(ctx, q.updateMetricsStmt, updateMetrics, arg.ChannelID, arg.SenderID, arg.WordCount)
	return err
}
