// Code generated by sqlc. DO NOT EDIT.
// source: messages.sql

package db

import (
	"context"
)

const createMessage = `-- name: CreateMessage :exec
INSERT INTO messages
  (channel_id, sender_id, created_at, message)
  VALUES ($1, $2, NOW(), $3)
  ON CONFLICT DO NOTHING
`

type CreateMessageParams struct {
	ChannelID string
	SenderID  string
	Message   string
}

func (q *Queries) CreateMessage(ctx context.Context, arg CreateMessageParams) error {
	_, err := q.exec(ctx, q.createMessageStmt, createMessage, arg.ChannelID, arg.SenderID, arg.Message)
	return err
}

const getMessageCount = `-- name: GetMessageCount :one
SELECT
  COUNT(*)
  FROM messages
  WHERE channel_id = $1
  AND sender_id = $2
`

type GetMessageCountParams struct {
	ChannelID string
	SenderID  string
}

func (q *Queries) GetMessageCount(ctx context.Context, arg GetMessageCountParams) (int64, error) {
	row := q.queryRow(ctx, q.getMessageCountStmt, getMessageCount, arg.ChannelID, arg.SenderID)
	var count int64
	err := row.Scan(&count)
	return count, err
}
