// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: approvals.sql

package db

import (
	"context"
)

const approve = `-- name: Approve :exec
INSERT INTO
  approvals (channel_id, user_id)
VALUES
  ($1, $2) ON CONFLICT DO NOTHING
`

type ApproveParams struct {
	ChannelID string
	UserID    string
}

func (q *Queries) Approve(ctx context.Context, arg ApproveParams) error {
	_, err := q.exec(ctx, q.approveStmt, approve, arg.ChannelID, arg.UserID)
	return err
}

const isApproved = `-- name: IsApproved :one
SELECT
  COUNT(*)
FROM
  approvals
WHERE
  channel_id = $1
  AND user_id = $2
`

type IsApprovedParams struct {
	ChannelID string
	UserID    string
}

func (q *Queries) IsApproved(ctx context.Context, arg IsApprovedParams) (int64, error) {
	row := q.queryRow(ctx, q.isApprovedStmt, isApproved, arg.ChannelID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const unapprove = `-- name: Unapprove :exec
DELETE FROM
  approvals
WHERE
  channel_id = $1
  AND user_id = $2
`

type UnapproveParams struct {
	ChannelID string
	UserID    string
}

func (q *Queries) Unapprove(ctx context.Context, arg UnapproveParams) error {
	_, err := q.exec(ctx, q.unapproveStmt, unapprove, arg.ChannelID, arg.UserID)
	return err
}
