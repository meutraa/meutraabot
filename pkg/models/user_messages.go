// Code generated by SQLBoiler 3.6.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/queries/qm"
	"github.com/volatiletech/sqlboiler/queries/qmhelper"
	"github.com/volatiletech/sqlboiler/strmangle"
)

// UserMessage is an object representing the database table.
type UserMessage struct {
	ChannelName string `boil:"channel_name" json:"channel_name" toml:"channel_name" yaml:"channel_name"`
	Sender      string `boil:"sender" json:"sender" toml:"sender" yaml:"sender"`
	MessageID   int    `boil:"message_id" json:"message_id" toml:"message_id" yaml:"message_id"`

	R *userMessageR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userMessageL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserMessageColumns = struct {
	ChannelName string
	Sender      string
	MessageID   string
}{
	ChannelName: "channel_name",
	Sender:      "sender",
	MessageID:   "message_id",
}

// Generated where

var UserMessageWhere = struct {
	ChannelName whereHelperstring
	Sender      whereHelperstring
	MessageID   whereHelperint
}{
	ChannelName: whereHelperstring{field: "\"user_messages\".\"channel_name\""},
	Sender:      whereHelperstring{field: "\"user_messages\".\"sender\""},
	MessageID:   whereHelperint{field: "\"user_messages\".\"message_id\""},
}

// UserMessageRels is where relationship names are stored.
var UserMessageRels = struct {
	Message     string
	ChannelName string
	ChannelName string
	ChannelName string
	ChannelName string
}{
	Message:     "Message",
	ChannelName: "ChannelName",
	ChannelName: "ChannelName",
	ChannelName: "ChannelName",
	ChannelName: "ChannelName",
}

// userMessageR is where relationships are stored.
type userMessageR struct {
	Message     *Message
	ChannelName *User
	ChannelName *User
	ChannelName *User
	ChannelName *User
}

// NewStruct creates a new relationship struct
func (*userMessageR) NewStruct() *userMessageR {
	return &userMessageR{}
}

// userMessageL is where Load methods for each relationship are stored.
type userMessageL struct{}

var (
	userMessageAllColumns            = []string{"channel_name", "sender", "message_id"}
	userMessageColumnsWithoutDefault = []string{"channel_name", "sender", "message_id"}
	userMessageColumnsWithDefault    = []string{}
	userMessagePrimaryKeyColumns     = []string{"channel_name", "sender", "message_id"}
)

type (
	// UserMessageSlice is an alias for a slice of pointers to UserMessage.
	// This should generally be used opposed to []UserMessage.
	UserMessageSlice []*UserMessage

	userMessageQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userMessageType                 = reflect.TypeOf(&UserMessage{})
	userMessageMapping              = queries.MakeStructMapping(userMessageType)
	userMessagePrimaryKeyMapping, _ = queries.BindMapping(userMessageType, userMessageMapping, userMessagePrimaryKeyColumns)
	userMessageInsertCacheMut       sync.RWMutex
	userMessageInsertCache          = make(map[string]insertCache)
	userMessageUpdateCacheMut       sync.RWMutex
	userMessageUpdateCache          = make(map[string]updateCache)
	userMessageUpsertCacheMut       sync.RWMutex
	userMessageUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

// One returns a single userMessage record from the query.
func (q userMessageQuery) One(ctx context.Context, exec boil.ContextExecutor) (*UserMessage, error) {
	o := &UserMessage{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for user_messages")
	}

	return o, nil
}

// All returns all UserMessage records from the query.
func (q userMessageQuery) All(ctx context.Context, exec boil.ContextExecutor) (UserMessageSlice, error) {
	var o []*UserMessage

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to UserMessage slice")
	}

	return o, nil
}

// Count returns the count of all UserMessage records in the query.
func (q userMessageQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count user_messages rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q userMessageQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if user_messages exists")
	}

	return count > 0, nil
}

// Message pointed to by the foreign key.
func (o *UserMessage) Message(mods ...qm.QueryMod) messageQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MessageID),
	}

	queryMods = append(queryMods, mods...)

	query := Messages(queryMods...)
	queries.SetFrom(query.Query, "\"messages\"")

	return query
}

// ChannelName pointed to by the foreign key.
func (o *UserMessage) ChannelName(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"channel_name\" = ?", o.ChannelName),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ChannelName pointed to by the foreign key.
func (o *UserMessage) ChannelName(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"sender\" = ?", o.ChannelName),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ChannelName pointed to by the foreign key.
func (o *UserMessage) ChannelName(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"channel_name\" = ?", o.Sender),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// ChannelName pointed to by the foreign key.
func (o *UserMessage) ChannelName(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"sender\" = ?", o.Sender),
	}

	queryMods = append(queryMods, mods...)

	query := Users(queryMods...)
	queries.SetFrom(query.Query, "\"users\"")

	return query
}

// LoadMessage allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMessageL) LoadMessage(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMessage interface{}, mods queries.Applicator) error {
	var slice []*UserMessage
	var object *UserMessage

	if singular {
		object = maybeUserMessage.(*UserMessage)
	} else {
		slice = *maybeUserMessage.(*[]*UserMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMessageR{}
		}
		args = append(args, object.MessageID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMessageR{}
			}

			for _, a := range args {
				if a == obj.MessageID {
					continue Outer
				}
			}

			args = append(args, obj.MessageID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`messages`), qm.WhereIn(`messages.id in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Message")
	}

	var resultSlice []*Message
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Message")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for messages")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for messages")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Message = foreign
		if foreign.R == nil {
			foreign.R = &messageR{}
		}
		foreign.R.UserMessages = append(foreign.R.UserMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MessageID == foreign.ID {
				local.R.Message = foreign
				if foreign.R == nil {
					foreign.R = &messageR{}
				}
				foreign.R.UserMessages = append(foreign.R.UserMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadChannelName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMessageL) LoadChannelName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMessage interface{}, mods queries.Applicator) error {
	var slice []*UserMessage
	var object *UserMessage

	if singular {
		object = maybeUserMessage.(*UserMessage)
	} else {
		slice = *maybeUserMessage.(*[]*UserMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMessageR{}
		}
		args = append(args, object.ChannelName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMessageR{}
			}

			for _, a := range args {
				if a == obj.ChannelName {
					continue Outer
				}
			}

			args = append(args, obj.ChannelName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.channel_name in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelName = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelName == foreign.ChannelName {
				local.R.ChannelName = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadChannelName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMessageL) LoadChannelName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMessage interface{}, mods queries.Applicator) error {
	var slice []*UserMessage
	var object *UserMessage

	if singular {
		object = maybeUserMessage.(*UserMessage)
	} else {
		slice = *maybeUserMessage.(*[]*UserMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMessageR{}
		}
		args = append(args, object.ChannelName)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMessageR{}
			}

			for _, a := range args {
				if a == obj.ChannelName {
					continue Outer
				}
			}

			args = append(args, obj.ChannelName)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.sender in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelName = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ChannelName == foreign.Sender {
				local.R.ChannelName = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadChannelName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMessageL) LoadChannelName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMessage interface{}, mods queries.Applicator) error {
	var slice []*UserMessage
	var object *UserMessage

	if singular {
		object = maybeUserMessage.(*UserMessage)
	} else {
		slice = *maybeUserMessage.(*[]*UserMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMessageR{}
		}
		args = append(args, object.Sender)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMessageR{}
			}

			for _, a := range args {
				if a == obj.Sender {
					continue Outer
				}
			}

			args = append(args, obj.Sender)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.channel_name in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelName = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Sender == foreign.ChannelName {
				local.R.ChannelName = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, local)
				break
			}
		}
	}

	return nil
}

// LoadChannelName allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userMessageL) LoadChannelName(ctx context.Context, e boil.ContextExecutor, singular bool, maybeUserMessage interface{}, mods queries.Applicator) error {
	var slice []*UserMessage
	var object *UserMessage

	if singular {
		object = maybeUserMessage.(*UserMessage)
	} else {
		slice = *maybeUserMessage.(*[]*UserMessage)
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &userMessageR{}
		}
		args = append(args, object.Sender)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userMessageR{}
			}

			for _, a := range args {
				if a == obj.Sender {
					continue Outer
				}
			}

			args = append(args, obj.Sender)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(qm.From(`users`), qm.WhereIn(`users.sender in ?`, args...))
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.ChannelName = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.Sender == foreign.Sender {
				local.R.ChannelName = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.ChannelNameUserMessages = append(foreign.R.ChannelNameUserMessages, local)
				break
			}
		}
	}

	return nil
}

// SetMessage of the userMessage to the related item.
// Sets o.R.Message to related.
// Adds o to related.R.UserMessages.
func (o *UserMessage) SetMessage(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Message) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"message_id"}),
		strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ChannelName, o.Sender, o.MessageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MessageID = related.ID
	if o.R == nil {
		o.R = &userMessageR{
			Message: related,
		}
	} else {
		o.R.Message = related
	}

	if related.R == nil {
		related.R = &messageR{
			UserMessages: UserMessageSlice{o},
		}
	} else {
		related.R.UserMessages = append(related.R.UserMessages, o)
	}

	return nil
}

// SetChannelName of the userMessage to the related item.
// Sets o.R.ChannelName to related.
// Adds o to related.R.ChannelNameUserMessages.
func (o *UserMessage) SetChannelName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_name"}),
		strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ChannelName, o.ChannelName, o.Sender, o.MessageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelName = related.ChannelName
	if o.R == nil {
		o.R = &userMessageR{
			ChannelName: related,
		}
	} else {
		o.R.ChannelName = related
	}

	if related.R == nil {
		related.R = &userR{
			ChannelNameUserMessages: UserMessageSlice{o},
		}
	} else {
		related.R.ChannelNameUserMessages = append(related.R.ChannelNameUserMessages, o)
	}

	return nil
}

// SetChannelName of the userMessage to the related item.
// Sets o.R.ChannelName to related.
// Adds o to related.R.ChannelNameUserMessages.
func (o *UserMessage) SetChannelName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"channel_name"}),
		strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.Sender, o.ChannelName, o.Sender, o.MessageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ChannelName = related.Sender
	if o.R == nil {
		o.R = &userMessageR{
			ChannelName: related,
		}
	} else {
		o.R.ChannelName = related
	}

	if related.R == nil {
		related.R = &userR{
			ChannelNameUserMessages: UserMessageSlice{o},
		}
	} else {
		related.R.ChannelNameUserMessages = append(related.R.ChannelNameUserMessages, o)
	}

	return nil
}

// SetChannelName of the userMessage to the related item.
// Sets o.R.ChannelName to related.
// Adds o to related.R.ChannelNameUserMessages.
func (o *UserMessage) SetChannelName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sender"}),
		strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.ChannelName, o.ChannelName, o.Sender, o.MessageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Sender = related.ChannelName
	if o.R == nil {
		o.R = &userMessageR{
			ChannelName: related,
		}
	} else {
		o.R.ChannelName = related
	}

	if related.R == nil {
		related.R = &userR{
			ChannelNameUserMessages: UserMessageSlice{o},
		}
	} else {
		related.R.ChannelNameUserMessages = append(related.R.ChannelNameUserMessages, o)
	}

	return nil
}

// SetChannelName of the userMessage to the related item.
// Sets o.R.ChannelName to related.
// Adds o to related.R.ChannelNameUserMessages.
func (o *UserMessage) SetChannelName(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"sender"}),
		strmangle.WhereClause("\"", "\"", 2, userMessagePrimaryKeyColumns),
	)
	values := []interface{}{related.Sender, o.ChannelName, o.Sender, o.MessageID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.Sender = related.Sender
	if o.R == nil {
		o.R = &userMessageR{
			ChannelName: related,
		}
	} else {
		o.R.ChannelName = related
	}

	if related.R == nil {
		related.R = &userR{
			ChannelNameUserMessages: UserMessageSlice{o},
		}
	} else {
		related.R.ChannelNameUserMessages = append(related.R.ChannelNameUserMessages, o)
	}

	return nil
}

// UserMessages retrieves all the records using an executor.
func UserMessages(mods ...qm.QueryMod) userMessageQuery {
	mods = append(mods, qm.From("\"user_messages\""))
	return userMessageQuery{NewQuery(mods...)}
}

// FindUserMessage retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserMessage(ctx context.Context, exec boil.ContextExecutor, channelName string, sender string, messageID int, selectCols ...string) (*UserMessage, error) {
	userMessageObj := &UserMessage{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_messages\" where \"channel_name\"=$1 AND \"sender\"=$2 AND \"message_id\"=$3", sel,
	)

	q := queries.Raw(query, channelName, sender, messageID)

	err := q.Bind(ctx, exec, userMessageObj)
	if err != nil {
		if errors.Cause(err) == sql.ErrNoRows {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from user_messages")
	}

	return userMessageObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserMessage) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_messages provided for insertion")
	}

	var err error

	nzDefaults := queries.NonZeroDefaultSet(userMessageColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userMessageInsertCacheMut.RLock()
	cache, cached := userMessageInsertCache[key]
	userMessageInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userMessageAllColumns,
			userMessageColumnsWithDefault,
			userMessageColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userMessageType, userMessageMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userMessageType, userMessageMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_messages\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_messages\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into user_messages")
	}

	if !cached {
		userMessageInsertCacheMut.Lock()
		userMessageInsertCache[key] = cache
		userMessageInsertCacheMut.Unlock()
	}

	return nil
}

// Update uses an executor to update the UserMessage.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserMessage) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	key := makeCacheKey(columns, nil)
	userMessageUpdateCacheMut.RLock()
	cache, cached := userMessageUpdateCache[key]
	userMessageUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userMessageAllColumns,
			userMessagePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update user_messages, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_messages\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userMessagePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userMessageType, userMessageMapping, append(wl, userMessagePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update user_messages row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for user_messages")
	}

	if !cached {
		userMessageUpdateCacheMut.Lock()
		userMessageUpdateCache[key] = cache
		userMessageUpdateCacheMut.Unlock()
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values.
func (q userMessageQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for user_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for user_messages")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserMessageSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_messages\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userMessagePrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in userMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all userMessage")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserMessage) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no user_messages provided for upsert")
	}

	nzDefaults := queries.NonZeroDefaultSet(userMessageColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userMessageUpsertCacheMut.RLock()
	cache, cached := userMessageUpsertCache[key]
	userMessageUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			userMessageAllColumns,
			userMessageColumnsWithDefault,
			userMessageColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			userMessageAllColumns,
			userMessagePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert user_messages, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(userMessagePrimaryKeyColumns))
			copy(conflict, userMessagePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_messages\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(userMessageType, userMessageMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userMessageType, userMessageMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if err == sql.ErrNoRows {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert user_messages")
	}

	if !cached {
		userMessageUpsertCacheMut.Lock()
		userMessageUpsertCache[key] = cache
		userMessageUpsertCacheMut.Unlock()
	}

	return nil
}

// Delete deletes a single UserMessage record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserMessage) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no UserMessage provided for delete")
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userMessagePrimaryKeyMapping)
	sql := "DELETE FROM \"user_messages\" WHERE \"channel_name\"=$1 AND \"sender\"=$2 AND \"message_id\"=$3"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from user_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for user_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q userMessageQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no userMessageQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from user_messages")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_messages")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserMessageSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMessagePrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from userMessage slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for user_messages")
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserMessage) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindUserMessage(ctx, exec, o.ChannelName, o.Sender, o.MessageID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserMessageSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserMessageSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userMessagePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_messages\".* FROM \"user_messages\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userMessagePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in UserMessageSlice")
	}

	*o = slice

	return nil
}

// UserMessageExists checks if the UserMessage row exists.
func UserMessageExists(ctx context.Context, exec boil.ContextExecutor, channelName string, sender string, messageID int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_messages\" where \"channel_name\"=$1 AND \"sender\"=$2 AND \"message_id\"=$3 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, channelName, sender, messageID)
	}
	row := exec.QueryRowContext(ctx, sql, channelName, sender, messageID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if user_messages exists")
	}

	return exists, nil
}
