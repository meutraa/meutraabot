// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: approvals.sql

package db

import (
	"context"
)

const approve = `-- name: Approve :exec
INSERT INTO
  approvals (channel_id, user_id, manual)
VALUES
  (?, ?, ?) ON CONFLICT DO NOTHING
`

type ApproveParams struct {
	ChannelID string
	UserID    string
	Manual    bool
}

func (q *Queries) Approve(ctx context.Context, arg ApproveParams) error {
	_, err := q.exec(ctx, q.approveStmt, approve, arg.ChannelID, arg.UserID, arg.Manual)
	return err
}

const getApprovals = `-- name: GetApprovals :many
SELECT
  channel_id, manual, user_id
FROM
  approvals
WHERE
  channel_id = ?
  AND manual = true
ORDER BY user_id DESC
`

func (q *Queries) GetApprovals(ctx context.Context, channelID string) ([]Approval, error) {
	rows, err := q.query(ctx, q.getApprovalsStmt, getApprovals, channelID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Approval
	for rows.Next() {
		var i Approval
		if err := rows.Scan(&i.ChannelID, &i.Manual, &i.UserID); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isApproved = `-- name: IsApproved :one
SELECT
  COUNT(*)
FROM
  approvals
WHERE
  channel_id = ?
  AND user_id = ?
`

type IsApprovedParams struct {
	ChannelID string
	UserID    string
}

func (q *Queries) IsApproved(ctx context.Context, arg IsApprovedParams) (int64, error) {
	row := q.queryRow(ctx, q.isApprovedStmt, isApproved, arg.ChannelID, arg.UserID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const unapprove = `-- name: Unapprove :exec
DELETE FROM
  approvals
WHERE
  channel_id = ?
  AND user_id = ?
`

type UnapproveParams struct {
	ChannelID string
	UserID    string
}

func (q *Queries) Unapprove(ctx context.Context, arg UnapproveParams) error {
	_, err := q.exec(ctx, q.unapproveStmt, unapprove, arg.ChannelID, arg.UserID)
	return err
}
