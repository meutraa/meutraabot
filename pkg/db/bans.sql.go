// Code generated by sqlc. DO NOT EDIT.
// source: bans.sql

package db

import (
	"context"
)

const banUser = `-- name: BanUser :exec
INSERT INTO bans (username)
  VALUES ($1)
  ON CONFLICT DO NOTHING
`

func (q *Queries) BanUser(ctx context.Context, username string) error {
	_, err := q.exec(ctx, q.banUserStmt, banUser, username)
	return err
}

const getBannedUsers = `-- name: GetBannedUsers :many
SELECT username FROM bans
`

func (q *Queries) GetBannedUsers(ctx context.Context) ([]string, error) {
	rows, err := q.query(ctx, q.getBannedUsersStmt, getBannedUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var username string
		if err := rows.Scan(&username); err != nil {
			return nil, err
		}
		items = append(items, username)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const isUserBanned = `-- name: IsUserBanned :one
SELECT (0 != COUNT(username)) as IsBanned FROM bans
  WHERE username = $1
`

func (q *Queries) IsUserBanned(ctx context.Context, username string) (bool, error) {
	row := q.queryRow(ctx, q.isUserBannedStmt, isUserBanned, username)
	var isbanned bool
	err := row.Scan(&isbanned)
	return isbanned, err
}
