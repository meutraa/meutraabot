// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"context"
	"database/sql"
	"fmt"
)

type DBTX interface {
	ExecContext(context.Context, string, ...interface{}) (sql.Result, error)
	PrepareContext(context.Context, string) (*sql.Stmt, error)
	QueryContext(context.Context, string, ...interface{}) (*sql.Rows, error)
	QueryRowContext(context.Context, string, ...interface{}) *sql.Row
}

func New(db DBTX) *Queries {
	return &Queries{db: db}
}

func Prepare(ctx context.Context, db DBTX) (*Queries, error) {
	q := Queries{db: db}
	var err error
	if q.approveStmt, err = db.PrepareContext(ctx, approve); err != nil {
		return nil, fmt.Errorf("error preparing query Approve: %w", err)
	}
	if q.createChannelStmt, err = db.PrepareContext(ctx, createChannel); err != nil {
		return nil, fmt.Errorf("error preparing query CreateChannel: %w", err)
	}
	if q.deleteChannelStmt, err = db.PrepareContext(ctx, deleteChannel); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteChannel: %w", err)
	}
	if q.deleteCommandStmt, err = db.PrepareContext(ctx, deleteCommand); err != nil {
		return nil, fmt.Errorf("error preparing query DeleteCommand: %w", err)
	}
	if q.getApprovalsStmt, err = db.PrepareContext(ctx, getApprovals); err != nil {
		return nil, fmt.Errorf("error preparing query GetApprovals: %w", err)
	}
	if q.getChannelStmt, err = db.PrepareContext(ctx, getChannel); err != nil {
		return nil, fmt.Errorf("error preparing query GetChannel: %w", err)
	}
	if q.getChannelsStmt, err = db.PrepareContext(ctx, getChannels); err != nil {
		return nil, fmt.Errorf("error preparing query GetChannels: %w", err)
	}
	if q.getCommandStmt, err = db.PrepareContext(ctx, getCommand); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommand: %w", err)
	}
	if q.getCommandsStmt, err = db.PrepareContext(ctx, getCommands); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommands: %w", err)
	}
	if q.getCommandsByIDStmt, err = db.PrepareContext(ctx, getCommandsByID); err != nil {
		return nil, fmt.Errorf("error preparing query GetCommandsByID: %w", err)
	}
	if q.getMatchingCommandsStmt, err = db.PrepareContext(ctx, getMatchingCommands); err != nil {
		return nil, fmt.Errorf("error preparing query GetMatchingCommands: %w", err)
	}
	if q.isApprovedStmt, err = db.PrepareContext(ctx, isApproved); err != nil {
		return nil, fmt.Errorf("error preparing query IsApproved: %w", err)
	}
	if q.setCommandStmt, err = db.PrepareContext(ctx, setCommand); err != nil {
		return nil, fmt.Errorf("error preparing query SetCommand: %w", err)
	}
	if q.unapproveStmt, err = db.PrepareContext(ctx, unapprove); err != nil {
		return nil, fmt.Errorf("error preparing query Unapprove: %w", err)
	}
	if q.updateChannelStmt, err = db.PrepareContext(ctx, updateChannel); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChannel: %w", err)
	}
	if q.updateChannelTokenStmt, err = db.PrepareContext(ctx, updateChannelToken); err != nil {
		return nil, fmt.Errorf("error preparing query UpdateChannelToken: %w", err)
	}
	return &q, nil
}

func (q *Queries) Close() error {
	var err error
	if q.approveStmt != nil {
		if cerr := q.approveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing approveStmt: %w", cerr)
		}
	}
	if q.createChannelStmt != nil {
		if cerr := q.createChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing createChannelStmt: %w", cerr)
		}
	}
	if q.deleteChannelStmt != nil {
		if cerr := q.deleteChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteChannelStmt: %w", cerr)
		}
	}
	if q.deleteCommandStmt != nil {
		if cerr := q.deleteCommandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing deleteCommandStmt: %w", cerr)
		}
	}
	if q.getApprovalsStmt != nil {
		if cerr := q.getApprovalsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getApprovalsStmt: %w", cerr)
		}
	}
	if q.getChannelStmt != nil {
		if cerr := q.getChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChannelStmt: %w", cerr)
		}
	}
	if q.getChannelsStmt != nil {
		if cerr := q.getChannelsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getChannelsStmt: %w", cerr)
		}
	}
	if q.getCommandStmt != nil {
		if cerr := q.getCommandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommandStmt: %w", cerr)
		}
	}
	if q.getCommandsStmt != nil {
		if cerr := q.getCommandsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommandsStmt: %w", cerr)
		}
	}
	if q.getCommandsByIDStmt != nil {
		if cerr := q.getCommandsByIDStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getCommandsByIDStmt: %w", cerr)
		}
	}
	if q.getMatchingCommandsStmt != nil {
		if cerr := q.getMatchingCommandsStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing getMatchingCommandsStmt: %w", cerr)
		}
	}
	if q.isApprovedStmt != nil {
		if cerr := q.isApprovedStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing isApprovedStmt: %w", cerr)
		}
	}
	if q.setCommandStmt != nil {
		if cerr := q.setCommandStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing setCommandStmt: %w", cerr)
		}
	}
	if q.unapproveStmt != nil {
		if cerr := q.unapproveStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing unapproveStmt: %w", cerr)
		}
	}
	if q.updateChannelStmt != nil {
		if cerr := q.updateChannelStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChannelStmt: %w", cerr)
		}
	}
	if q.updateChannelTokenStmt != nil {
		if cerr := q.updateChannelTokenStmt.Close(); cerr != nil {
			err = fmt.Errorf("error closing updateChannelTokenStmt: %w", cerr)
		}
	}
	return err
}

func (q *Queries) exec(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (sql.Result, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).ExecContext(ctx, args...)
	case stmt != nil:
		return stmt.ExecContext(ctx, args...)
	default:
		return q.db.ExecContext(ctx, query, args...)
	}
}

func (q *Queries) query(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) (*sql.Rows, error) {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryContext(ctx, args...)
	default:
		return q.db.QueryContext(ctx, query, args...)
	}
}

func (q *Queries) queryRow(ctx context.Context, stmt *sql.Stmt, query string, args ...interface{}) *sql.Row {
	switch {
	case stmt != nil && q.tx != nil:
		return q.tx.StmtContext(ctx, stmt).QueryRowContext(ctx, args...)
	case stmt != nil:
		return stmt.QueryRowContext(ctx, args...)
	default:
		return q.db.QueryRowContext(ctx, query, args...)
	}
}

type Queries struct {
	db                      DBTX
	tx                      *sql.Tx
	approveStmt             *sql.Stmt
	createChannelStmt       *sql.Stmt
	deleteChannelStmt       *sql.Stmt
	deleteCommandStmt       *sql.Stmt
	getApprovalsStmt        *sql.Stmt
	getChannelStmt          *sql.Stmt
	getChannelsStmt         *sql.Stmt
	getCommandStmt          *sql.Stmt
	getCommandsStmt         *sql.Stmt
	getCommandsByIDStmt     *sql.Stmt
	getMatchingCommandsStmt *sql.Stmt
	isApprovedStmt          *sql.Stmt
	setCommandStmt          *sql.Stmt
	unapproveStmt           *sql.Stmt
	updateChannelStmt       *sql.Stmt
	updateChannelTokenStmt  *sql.Stmt
}

func (q *Queries) WithTx(tx *sql.Tx) *Queries {
	return &Queries{
		db:                      tx,
		tx:                      tx,
		approveStmt:             q.approveStmt,
		createChannelStmt:       q.createChannelStmt,
		deleteChannelStmt:       q.deleteChannelStmt,
		deleteCommandStmt:       q.deleteCommandStmt,
		getApprovalsStmt:        q.getApprovalsStmt,
		getChannelStmt:          q.getChannelStmt,
		getChannelsStmt:         q.getChannelsStmt,
		getCommandStmt:          q.getCommandStmt,
		getCommandsStmt:         q.getCommandsStmt,
		getCommandsByIDStmt:     q.getCommandsByIDStmt,
		getMatchingCommandsStmt: q.getMatchingCommandsStmt,
		isApprovedStmt:          q.isApprovedStmt,
		setCommandStmt:          q.setCommandStmt,
		unapproveStmt:           q.unapproveStmt,
		updateChannelStmt:       q.updateChannelStmt,
		updateChannelTokenStmt:  q.updateChannelTokenStmt,
	}
}
